#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>
#include <ESP8266HTTPClient.h>
#include <ArduinoJson.h>

const char* ssid = "SSID";
const char* password = "PASSWORD";
const char* Gemini_Token = "YOUR_API_KEY";
const char* Gemini_Max_Tokens = "100";
String res = "";

void setup() {
  Serial.begin(115200);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("Connected to WiFi");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());
}

void loop() {
  Serial.println("");
  Serial.println("Ask your Question: ");
  while (!Serial.available());
  while (Serial.available()) {
    char add = Serial.read();
    res = res + add;
    delay(1);
  }
  int len = res.length();
  res = res.substring(0, (len - 1));
  res = "\"" + res + "\"";
  Serial.println("");
  Serial.print("Asking Your Question: ");
  Serial.println(res);

  WiFiClientSecure client;
  client.setInsecure();  // Disable SSL certificate validation for testing purposes. Not recommended for production.

  HTTPClient https;

  if (https.begin(client, "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=" + (String)Gemini_Token)) {  // HTTPS
    https.addHeader("Content-Type", "application/json");
    String payload = String("{\"contents\": [{\"parts\":[{\"text\":" + res + "}]}],\"generationConfig\": {\"maxOutputTokens\": " + (String)Gemini_Max_Tokens + "}}");

    
    int httpCode = https.POST(payload);

    if (httpCode > 0) {
       if (httpCode == HTTP_CODE_OK) {
        String response = https.getString();
      
      DynamicJsonDocument doc(2048);
        DeserializationError error = deserializeJson(doc, response);
        if (error) {
          Serial.print("deserializeJson() failed: ");
          Serial.println(error.f_str());
          return;
        }
        String Answer = doc["candidates"][0]["content"]["parts"][0]["text"];
        Answer.trim();
          String filteredAnswer = "";
      for (size_t i = 0; i < Answer.length(); i++) {
        char c = Answer[i];
        if (isalnum(c) || isspace(c)) {
          filteredAnswer += c;
        } else {
          filteredAnswer += ' ';
          //filteredAnswer+="\n";
        }
      }
      Answer = filteredAnswer;
        Serial.println("");
        Serial.println("Here is your Answer: ");
        Serial.println("\"");
        Serial.println(Answer);
        Serial.println("\"");
      } else {
        Serial.printf("[HTTPS] POST... failed, response code: %d\n", httpCode);
      }
    } else {
      Serial.printf("[HTTPS] POST... failed, error: %s\n", https.errorToString(httpCode).c_str());
    }
    https.end();
  } else {
    Serial.printf("[HTTPS] Unable to connect\n");
  }
  res = "";
}
